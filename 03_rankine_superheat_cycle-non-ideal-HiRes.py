# -*- coding: utf-8 -*-
"""
@date: 14 December 2020 (update)

This source code is provided by Richard J Smith 'as is' and 'with all faults'. The provider makes no 
representations or warranties of any kind concerning the safety, suitability, inaccuracies, 
typographical errors, or other harmful components of this software.
"""

from pyXSteam.XSteam import XSteam

steamTable = XSteam(XSteam.UNIT_SYSTEM_MKS)

from fluprodia import FluidPropertyDiagram

print('Rankine superheat cycle analysis (non ideal)')

p1 = 0.06
s1 = steamTable.sL_p(p1)
T1 = steamTable.t_ps(p1, s1)
h1 = steamTable.hL_p(p1)
print('\nPoint 1')
print(f"p1: {round(float(p1),1)} bar")
print(f"T1: {round(float(T1),1)} degC")
print(f"H1: {round(float(h1),1)} kJ/kg")
print(f"S1: {round(float(s1),3)} kJ/kg K")

p2 = 150
s2 = s1

v = 1/steamTable.rhoL_p(p1)
w_p = v*(p2-p1)

print('\nPoint 2')
h2 = h1+w_p
print(f"H2: {round(float(h2),1)} kJ/kg")

T2 = steamTable.t_ph(p2, h2)
print(f"T2: {round(float(T2),1)} degC")

h2dash = steamTable.hL_p(p2)
s2dash = steamTable.sL_p(p2)
T2dash = steamTable.t_ph(p2, h2dash)
print('\nPoint 2 dash')
print(f"T2dash: {round(float(T2dash),1)} degC")
print(f"p2dash: {round(float(p2),1)} bar")
print(f"H2dash: {round(float(h2dash),1)} kJ/kg")
print(f"S2dash: {round(float(s2dash),3)} kJ/kg K")

h3dash = steamTable.hV_p(p2)
s3dash = steamTable.sV_p(p2)
T3dash = T2dash
print('\nPoint 3dash')
print(f"T3dash: {round(float(T3dash),1)} degC")
print(f"H3dash: {round(float(h3dash),1)} kJ/kg")
print(f"S3dash: {round(float(s3dash),3)} kJ/kg K")

p3 = p2
T3 = 540
h3 = steamTable.h_pt(p3, T3)
s3 = steamTable.s_pt(p3, T3)
print('\nPoint 3')
print(f"T3: {round(float(T3),1)} degC")
print(f"p3: {round(float(p3),1)} bar")
print(f"H3: {round(float(h3),1)} kJ/kg")
print(f"S3: {round(float(s3),3)} kJ/kg K")

p4 = p1
s4 = s3
T4 = steamTable.t_ps(p4, s4)
x4 = steamTable.x_ps(p4, s4)
h4 = steamTable.h_px(p4, x4)
print('\nPoint 4')
print(f"T4: {round(float(T4),1)} degC")
print(f"p4: {round(float(p4),1)} bar")

turbeff = 0.9
h4r = h3 - (turbeff * h3) + (turbeff * h4)

print(f"H4ideal: {round(float(h4),1)} kJ/kg")
print(f"H4real: {round(float(h4r),1)} kJ/kg")
s4r = steamTable.s_ph(p4, h4r)
print(f"S4ideal: {round(float(s4),3)} kJ/kg K")
print(f"S4real: {round(float(s4r ),3)} kJ/kg K")
x4r = steamTable.x_ps(p4, s4r)
print(f"x4ideal: {round(float(x4),2)} ")
print(f"x4real: {round(float(x4r),2)} ")

print('\nSummary')
print(f"Work required by pump: {round(float(w_p),1)} kJ/kg")

w_HPt = h3-h4r
print(f"Work generated by turbine: {round(float(w_HPt),1)} kJ/kg")

q_H = (h3-h2)
print(f"Heat input by boiler: {round(float(q_H),1)} kJ/kg")

q_L = h4r-h1
print(f"Heat rejected by the condenser: {round(float(q_L),1)} kJ/kg")

eta_th = (w_HPt-w_p)/q_H*100
print(f"Thermal efficiency is: {round(float(eta_th),1)}%")

HRcycle = 3600*100/eta_th
print(f"HR rankine cycle: {round(float(HRcycle),1)} kJ/kWh")

data = {
    'raise temperature to saturation (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': 150,
        'starting_point_property': 'T',
        'starting_point_value': T2,
        'ending_point_property': 'T',
        'ending_point_value': T2dash
    },
    'change of state (isothermal)': {
        'isoline_property': 'T',
        'isoline_value': T2dash,
        'starting_point_property': 's',
        'starting_point_value': s2dash*1000,
        'ending_point_property': 's',
        'ending_point_value': s3dash*1000
    },
    'superheat added (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': p2,
        'starting_point_property': 'T',
        'starting_point_value': T3dash,
        'ending_point_property': 'T',
        'ending_point_value': T3
    },    
    'turbine expansion (isentropic)': {
        'isoline_property': 's',
        'isoline_value': s3*1000,
        'isoline_value_end': (s4r)*1000,
        'starting_point_property': 'T',
        'starting_point_value': T3,
        'ending_point_property': 'T',
        'ending_point_value': T4
    },
    'condensing (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': p4,
        'starting_point_property': 's',
        'starting_point_value': (s4r)*1000,
        'ending_point_property': 's',
        'ending_point_value': s1*1000
    }
}

diagram = FluidPropertyDiagram(fluid='H2O')
diagram.set_unit_system(T='°C', h='kJ/kg', p='bar')
diagram.calc_isolines()
diagram.set_limits(x_min=0, x_max=8000, y_min=0, y_max=700)

diagram.draw_isolines(diagram_type='Ts')

for name, specs in data.items():
    data[name]['datapoints'] = diagram.calc_individual_isoline(**specs)

for key, specs in data.items():
    datapoints = specs['datapoints']
    diagram.ax.plot(specs['datapoints']['s'], specs['datapoints']['T'], label=key)
    
diagram.ax.legend(loc='upper left')

diagram.ax.text((s1-.1)*1000,T1,f'(1)\nT = {round(float(T1),2)} C\nP = {round(float(p1),1)} bar  \nh = {round(float(h1),1)} kJ/kg\n s = {round(float(s1),3)} kJ/kgK',
    ha='right',backgroundcolor='white')
diagram.ax.text(1.6*1000,60,f'(2)\nT = {round(float(T2),2)} C\nP = {round(float(p2),1)} bar \nh = {round(float(h2),1)} kJ/kg',
    ha='left',backgroundcolor='white')
diagram.ax.text((s2dash-.15)*1000,T2dash,f"(2')\nT = {round(float(T2dash),2)} C\nP = {round(float(p2),1)} bar \nh = {round(float(h2dash),1)} kJ/kg \ns = {round(float(s2dash),3)} kJ/kgK",
    ha='right',backgroundcolor='white')
diagram.ax.text((s3dash-.1)*1000,T3dash-80,f"(3')\nh = {round(float(h3dash),1)} kJ/kg \ns = {round(float(s3dash),3)} kJ/kgK",
    ha='right',backgroundcolor='white')
diagram.ax.text(6.3*1000,T3-50,f'(3)\nT = {round(float(T3),2)} C\nh = {round(float(h3),1)} kJ/kg \ns = {round(float(s3),3)} kJ/kgK',
    ha='right',backgroundcolor='white')
diagram.ax.text((s4r+.1)*1000,T4,f'(4)\nT = {round(float(T4),2)} C\nh = {round(float(h4r),1)} kJ/kg \ns = {round(float(s4r),3)} kJ/kgK \nx = {round(float(x4r),3)}',
    ha='left',backgroundcolor='white')

diagram.save('03-rankine-superheat-HighRes-TSdiagram.png', dpi=300)

diagram = FluidPropertyDiagram(fluid='H2O')
diagram.set_unit_system(T='°C', h='kJ/kg', p='bar')
diagram.calc_isolines()
diagram.set_limits(x_min=0, x_max=8000, y_min=0, y_max=4000)
diagram.draw_isolines(diagram_type='hs')

data = {
    'raise temperature to saturation (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': 150,
        'starting_point_property': 'T',
        'starting_point_value': T2,
        'ending_point_property': 'T',
        'ending_point_value': T2dash
    },
    'change of state (isothermal)': {
        'isoline_property': 'T',
        'isoline_value': T2dash,
        'starting_point_property': 's',
        'starting_point_value': s2dash*1000,
        'ending_point_property': 's',
        'ending_point_value': s3dash*1000
    },
    'superheat added (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': p2,
        'starting_point_property': 'T',
        'starting_point_value': T3dash,
        'ending_point_property': 'T',
        'ending_point_value': T3
    },    
    'turbine expansion (isentropic)': {
        'isoline_property': 's',
        'isoline_value': s3*1000,
        'isoline_value_end': (s4r)*1000,
        'starting_point_property': 'T',
        'starting_point_value': T3,
        'ending_point_property': 'T',
        'ending_point_value': T4
    },
    'condensing (isobaric)': {
        'isoline_property': 'p',
        'isoline_value': p4,
        'starting_point_property': 's',
        'starting_point_value': (s4r)*1000,
        'ending_point_property': 's',
        'ending_point_value': s1*1000
    }
}

for name, specs in data.items():
    data[name]['datapoints'] = diagram.calc_individual_isoline(**specs)

for key, specs in data.items():
    datapoints = specs['datapoints']
    diagram.ax.plot(specs['datapoints']['s'], specs['datapoints']['h'], label=key)
    
diagram.ax.legend(loc='upper left')

diagram.save('03-rankine-superheat-HighRes-HSdiagram.png', dpi=300)